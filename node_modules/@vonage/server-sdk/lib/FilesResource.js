"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var fs = require("fs");

class FilesResource {
  /**
   * The path to the `calls` resource.
   */
  static get PATH() {
    return "/v1/files";
  }
  /**
   * Creates a new FilesResource.
   *
   * @param {Credentials} creds - Credentials used when interacting with the Vonage API.
   * @param {Object} options - additional options for the class.
   */


  constructor(creds, options) {
    this.creds = creds;
    this.options = options;
  }
  /**
   * Get stream for a remote File
   *
   * @param {string} [fileIdOrUrl] - The unique identifier or URL for the file
   * @param {function} callback - function to be called when the request completes.
   */


  get(fileIdOrUrl, callback) {
    if (!fileIdOrUrl) {
      throw new Error('"fileIdOrUrl" is a required parameter');
    }

    fileIdOrUrl = fileIdOrUrl.split("/").pop(-1);
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: "".concat(FilesResource.PATH, "/").concat(fileIdOrUrl),
      method: "GET",
      headers: {
        "Content-Type": "application/octet-stream",
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }
  /**
   * Save remote File locally
   *
   * @param {string} [fileIdOrUrl] - The unique identifier or URL for the file
   * @param {string} [file] - Filename or file descriptor
   * @param {function} callback - function to be called when the request completes.
   */


  save(fileIdOrUrl, file, callback) {
    this.get(fileIdOrUrl, (error, data) => {
      if (error) {
        callback(error, null);
      } else {
        this.__storeFile(data, file, callback);
      }
    });
  }

  __storeFile(data, file, callback) {
    fs.writeFile(file, data, error => {
      if (error) {
        callback(error, null);
      } else {
        callback(null, file);
      }
    });
  }

}

var _default = FilesResource;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJGaWxlc1Jlc291cmNlIiwiUEFUSCIsImNvbnN0cnVjdG9yIiwiY3JlZHMiLCJvcHRpb25zIiwiZ2V0IiwiZmlsZUlkT3JVcmwiLCJjYWxsYmFjayIsIkVycm9yIiwic3BsaXQiLCJwb3AiLCJjb25maWciLCJob3N0IiwiYXBpSG9zdCIsInBhdGgiLCJtZXRob2QiLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsImdlbmVyYXRlSnd0IiwiaHR0cENsaWVudCIsInJlcXVlc3QiLCJzYXZlIiwiZmlsZSIsImVycm9yIiwiZGF0YSIsIl9fc3RvcmVGaWxlIiwid3JpdGVGaWxlIl0sInNvdXJjZXMiOlsiLi4vc3JjL0ZpbGVzUmVzb3VyY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcblxuY2xhc3MgRmlsZXNSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBUaGUgcGF0aCB0byB0aGUgYGNhbGxzYCByZXNvdXJjZS5cbiAgICovXG4gIHN0YXRpYyBnZXQgUEFUSCgpIHtcbiAgICByZXR1cm4gXCIvdjEvZmlsZXNcIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IEZpbGVzUmVzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7Q3JlZGVudGlhbHN9IGNyZWRzIC0gQ3JlZGVudGlhbHMgdXNlZCB3aGVuIGludGVyYWN0aW5nIHdpdGggdGhlIFZvbmFnZSBBUEkuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gYWRkaXRpb25hbCBvcHRpb25zIGZvciB0aGUgY2xhc3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihjcmVkcywgb3B0aW9ucykge1xuICAgIHRoaXMuY3JlZHMgPSBjcmVkcztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBzdHJlYW0gZm9yIGEgcmVtb3RlIEZpbGVcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtmaWxlSWRPclVybF0gLSBUaGUgdW5pcXVlIGlkZW50aWZpZXIgb3IgVVJMIGZvciB0aGUgZmlsZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSByZXF1ZXN0IGNvbXBsZXRlcy5cbiAgICovXG4gIGdldChmaWxlSWRPclVybCwgY2FsbGJhY2spIHtcbiAgICBpZiAoIWZpbGVJZE9yVXJsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiZmlsZUlkT3JVcmxcIiBpcyBhIHJlcXVpcmVkIHBhcmFtZXRlcicpO1xuICAgIH1cblxuICAgIGZpbGVJZE9yVXJsID0gZmlsZUlkT3JVcmwuc3BsaXQoXCIvXCIpLnBvcCgtMSk7XG5cbiAgICB2YXIgY29uZmlnID0ge1xuICAgICAgaG9zdDogdGhpcy5vcHRpb25zLmFwaUhvc3QgfHwgXCJhcGkubmV4bW8uY29tXCIsXG4gICAgICBwYXRoOiBgJHtGaWxlc1Jlc291cmNlLlBBVEh9LyR7ZmlsZUlkT3JVcmx9YCxcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIixcbiAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuY3JlZHMuZ2VuZXJhdGVKd3QoKX1gLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgdGhpcy5vcHRpb25zLmh0dHBDbGllbnQucmVxdWVzdChjb25maWcsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTYXZlIHJlbW90ZSBGaWxlIGxvY2FsbHlcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtmaWxlSWRPclVybF0gLSBUaGUgdW5pcXVlIGlkZW50aWZpZXIgb3IgVVJMIGZvciB0aGUgZmlsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2ZpbGVdIC0gRmlsZW5hbWUgb3IgZmlsZSBkZXNjcmlwdG9yXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHJlcXVlc3QgY29tcGxldGVzLlxuICAgKi9cbiAgc2F2ZShmaWxlSWRPclVybCwgZmlsZSwgY2FsbGJhY2spIHtcbiAgICB0aGlzLmdldChmaWxlSWRPclVybCwgKGVycm9yLCBkYXRhKSA9PiB7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fX3N0b3JlRmlsZShkYXRhLCBmaWxlLCBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBfX3N0b3JlRmlsZShkYXRhLCBmaWxlLCBjYWxsYmFjaykge1xuICAgIGZzLndyaXRlRmlsZShmaWxlLCBkYXRhLCAoZXJyb3IpID0+IHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhudWxsLCBmaWxlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGaWxlc1Jlc291cmNlO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQUVBLElBQUlBLEVBQUUsR0FBR0MsT0FBTyxDQUFDLElBQUQsQ0FBaEI7O0FBRUEsTUFBTUMsYUFBTixDQUFvQjtFQUNsQjtBQUNGO0FBQ0E7RUFDaUIsV0FBSkMsSUFBSSxHQUFHO0lBQ2hCLE9BQU8sV0FBUDtFQUNEO0VBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7RUFDRUMsV0FBVyxDQUFDQyxLQUFELEVBQVFDLE9BQVIsRUFBaUI7SUFDMUIsS0FBS0QsS0FBTCxHQUFhQSxLQUFiO0lBQ0EsS0FBS0MsT0FBTCxHQUFlQSxPQUFmO0VBQ0Q7RUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztFQUNFQyxHQUFHLENBQUNDLFdBQUQsRUFBY0MsUUFBZCxFQUF3QjtJQUN6QixJQUFJLENBQUNELFdBQUwsRUFBa0I7TUFDaEIsTUFBTSxJQUFJRSxLQUFKLENBQVUsdUNBQVYsQ0FBTjtJQUNEOztJQUVERixXQUFXLEdBQUdBLFdBQVcsQ0FBQ0csS0FBWixDQUFrQixHQUFsQixFQUF1QkMsR0FBdkIsQ0FBMkIsQ0FBQyxDQUE1QixDQUFkO0lBRUEsSUFBSUMsTUFBTSxHQUFHO01BQ1hDLElBQUksRUFBRSxLQUFLUixPQUFMLENBQWFTLE9BQWIsSUFBd0IsZUFEbkI7TUFFWEMsSUFBSSxZQUFLZCxhQUFhLENBQUNDLElBQW5CLGNBQTJCSyxXQUEzQixDQUZPO01BR1hTLE1BQU0sRUFBRSxLQUhHO01BSVhDLE9BQU8sRUFBRTtRQUNQLGdCQUFnQiwwQkFEVDtRQUVQQyxhQUFhLG1CQUFZLEtBQUtkLEtBQUwsQ0FBV2UsV0FBWCxFQUFaO01BRk47SUFKRSxDQUFiO0lBVUEsS0FBS2QsT0FBTCxDQUFhZSxVQUFiLENBQXdCQyxPQUF4QixDQUFnQ1QsTUFBaEMsRUFBd0NKLFFBQXhDO0VBQ0Q7RUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0VBQ0VjLElBQUksQ0FBQ2YsV0FBRCxFQUFjZ0IsSUFBZCxFQUFvQmYsUUFBcEIsRUFBOEI7SUFDaEMsS0FBS0YsR0FBTCxDQUFTQyxXQUFULEVBQXNCLENBQUNpQixLQUFELEVBQVFDLElBQVIsS0FBaUI7TUFDckMsSUFBSUQsS0FBSixFQUFXO1FBQ1RoQixRQUFRLENBQUNnQixLQUFELEVBQVEsSUFBUixDQUFSO01BQ0QsQ0FGRCxNQUVPO1FBQ0wsS0FBS0UsV0FBTCxDQUFpQkQsSUFBakIsRUFBdUJGLElBQXZCLEVBQTZCZixRQUE3QjtNQUNEO0lBQ0YsQ0FORDtFQU9EOztFQUVEa0IsV0FBVyxDQUFDRCxJQUFELEVBQU9GLElBQVAsRUFBYWYsUUFBYixFQUF1QjtJQUNoQ1QsRUFBRSxDQUFDNEIsU0FBSCxDQUFhSixJQUFiLEVBQW1CRSxJQUFuQixFQUEwQkQsS0FBRCxJQUFXO01BQ2xDLElBQUlBLEtBQUosRUFBVztRQUNUaEIsUUFBUSxDQUFDZ0IsS0FBRCxFQUFRLElBQVIsQ0FBUjtNQUNELENBRkQsTUFFTztRQUNMaEIsUUFBUSxDQUFDLElBQUQsRUFBT2UsSUFBUCxDQUFSO01BQ0Q7SUFDRixDQU5EO0VBT0Q7O0FBdEVpQjs7ZUF5RUx0QixhIn0=